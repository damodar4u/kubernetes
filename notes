ubuntu@ubuntu-xenial:~/.ssh$ kops create cluster --name=kubernetes.pickyprivacy.tech --state=s3://kops-state-a
bcd1234 --zones=us-east-1a --node-count=2 --node-size=t2.micro --master-size=t2.micro --dns-zone=kubernetes.pi
ckyprivacy.tech


Cluster configuration has been created.

Suggestions:
 * list clusters with: kops get cluster
 * edit this cluster with: kops edit cluster kubernetes.pickyprivacy.tech
 * edit your node instance group: kops edit ig --name=kubernetes.pickyprivacy.tech nodes
 * edit your master instance group: kops edit ig --name=kubernetes.pickyprivacy.tech master-us-east-1a

Finally configure your cluster with: kops update cluster kubernetes.pickyprivacy.tech --yes



ubuntu@ubuntu-xenial:~/git_ku$ kops update cluster kubernetes.pickyprivacy.tech --yes --state=s3://kops-state-
abcd1234
I0202 19:16:24.056880    9073 executor.go:91] Tasks: 0 done / 73 total; 31 can run
I0202 19:16:25.145199    9073 vfs_castore.go:430] Issuing new certificate: "ca"
I0202 19:16:25.165190    9073 vfs_castore.go:430] Issuing new certificate: "apiserver-aggregator-ca"
I0202 19:16:25.982422    9073 executor.go:91] Tasks: 31 done / 73 total; 24 can run
I0202 19:16:27.412914    9073 vfs_castore.go:430] Issuing new certificate: "kubelet"
I0202 19:16:27.527240    9073 vfs_castore.go:430] Issuing new certificate: "kube-proxy"
I0202 19:16:27.625573    9073 vfs_castore.go:430] Issuing new certificate: "apiserver-proxy-client"
I0202 19:16:27.753642    9073 vfs_castore.go:430] Issuing new certificate: "apiserver-aggregator"
I0202 19:16:27.853057    9073 vfs_castore.go:430] Issuing new certificate: "kube-scheduler"
I0202 19:16:28.507957    9073 vfs_castore.go:430] Issuing new certificate: "kubecfg"
I0202 19:16:28.725199    9073 vfs_castore.go:430] Issuing new certificate: "kube-controller-manager"
I0202 19:16:28.855851    9073 vfs_castore.go:430] Issuing new certificate: "kops"
I0202 19:16:28.867621    9073 vfs_castore.go:430] Issuing new certificate: "kubelet-api"
I0202 19:16:28.980049    9073 vfs_castore.go:430] Issuing new certificate: "master"
I0202 19:16:29.708132    9073 executor.go:91] Tasks: 55 done / 73 total; 16 can run
I0202 19:16:30.809785    9073 launchconfiguration.go:333] waiting for IAM instance profile "nodes.kubernetes.pickyprivacy.tech" to be ready
I0202 19:16:30.851169    9073 launchconfiguration.go:333] waiting for IAM instance profile "masters.kubernetes.pickyprivacy.tech" to be ready
I0202 19:16:41.558527    9073 executor.go:91] Tasks: 71 done / 73 total; 2 can run
I0202 19:16:42.366127    9073 executor.go:91] Tasks: 73 done / 73 total; 0 can run
I0202 19:16:42.366255    9073 dns.go:153] Pre-creating DNS records
I0202 19:16:43.246256    9073 update_cluster.go:248] Exporting kubecfg for cluster
kops has set your kubectl context to kubernetes.pickyprivacy.tech

Cluster is starting.  It should be ready in a few minutes.

Suggestions:
 * validate cluster: kops validate cluster
 * list nodes: kubectl get nodes --show-labels
 * ssh to the master: ssh -i ~/.ssh/id_rsa admin@api.kubernetes.pickyprivacy.tech
The admin user is specific to Debian. If not using Debian please use the appropriate user based on your OS.
 * read about installing addons: https://github.com/kubernetes/kops/blob/master/docs/addons.md
 
 

ubuntu@ubuntu-xenial:~/.kube$ kubectl get node
NAME                            STATUS    ROLES     AGE       VERSION
ip-172-20-33-141.ec2.internal   Ready     master    23m       v1.8.6
ip-172-20-41-186.ec2.internal   Ready     node      22m       v1.8.6
ip-172-20-57-116.ec2.internal   Ready     node      22m       v1.8.6



ubuntu@ubuntu-xenial:~/.kube$ kubectl run hello-minikube --image=gcr.io/google_containers/echoserver:1.4 --port=9080
deployment "hello-minikube" created

hello-minikubeubuntu@ubuntu-xenial:~/.kube$ kubectl expose deployment hello-minikube --type=NodePort
service "hello-minikube" exposed



ubuntu@ubuntu-xenial:~/.kube$ kubectl get service
NAME             TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE
hello-minikube   NodePort    100.64.117.71   <none>        9080:31598/TCP   38s
kubernetes       ClusterIP   100.64.0.1      <none>        443/TCP          31m


ubuntu@ubuntu-xenial:~/.kube$ kops delete cluster --name=kubernetes.pickyprivacy.tech --yes --state=s3://kops-state-abcd1234


ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl create -f replication-controller/helloworld-repl-controller.yml
replicationcontroller "helloworld-controller" created

ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl get pods
NAME                          READY     STATUS    RESTARTS   AGE
helloworld-controller-mm48g   1/1       Running   0          30s
nodehelloworld.example.com    1/1       Running   0          1d


ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl describe pod nodehelloworld.example.com                                                    
Name:           nodehelloworld.example.com                                                                                                   
Namespace:      default                                                                                                                      
Node:           ip-172-20-57-184.ec2.internal/172.20.57.184                                                                                  
Start Time:     Mon, 05 Feb 2018 19:43:17 +0000                                                                                              
Labels:         app=helloworld                                                                                                               
Annotations:    kubernetes.io/limit-ranger=LimitRanger plugin set: cpu request for container k8s-demo                                        
Status:         Running                                                                                                                      
IP:             100.96.2.3                                                                                                                   
Controlled By:  ReplicationController/helloworld-controller                                                                                  
Containers:                                                                                                                                  
  k8s-demo:                                                                                                                                  
    Container ID:   docker://62bf53252e358d3a41965364fb46cd2c294582f9ec471b6b4c36136a6459ac76                                                
    Image:          wardviaene/k8s-demo                                                                                                      
    
ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl delete pod nodehelloworld.example.com
pod "nodehelloworld.example.com" deleted

    
ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl get pods
NAME                          READY     STATUS        RESTARTS   AGE
helloworld-controller-cc27q   1/1       Running       0          11s
helloworld-controller-mm48g   1/1       Running       0          5m
nodehelloworld.example.com    1/1       Terminating   0          1d


ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl scale --replicas=4 -f replication-controller/helloworld-repl-controller.yml
replicationcontroller "helloworld-controller" scaled


ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl get pods
NAME                          READY     STATUS    RESTARTS   AGE
helloworld-controller-6h9jb   1/1       Running   0          17s
helloworld-controller-cc27q   1/1       Running   0          9m
helloworld-controller-mm48g   1/1       Running   0          15m
helloworld-controller-vtdhl   1/1       Running   0          17s


ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl get rc
NAME                    DESIRED   CURRENT   READY     AGE
helloworld-controller   4         4         4         19m



ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl scale --replicas=1 rc/helloworld-controller
replicationcontroller "helloworld-controller" scaled
ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl get pods
NAME                          READY     STATUS        RESTARTS   AGE
helloworld-controller-6h9jb   1/1       Terminating   0          6m
helloworld-controller-cc27q   1/1       Terminating   0          15m
helloworld-controller-mm48g   1/1       Running       0          21m
helloworld-controller-vtdhl   1/1       Terminating   0          6m



ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl get rs
No resources found.
ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl get rc
NAME                    DESIRED   CURRENT   READY     AGE
helloworld-controller   1         1         1         41m
ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl get deployments
No resources found.



ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl get pods --show-labels
NAME                          READY     STATUS    RESTARTS   AGE       LABELS
helloworld-controller-mm48g   1/1       Running   0          42m       app=helloworld


ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl rollout status deployment/helloworld-deployment


ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl set image deployment/helloworld-deployment k8s-demo=k8s-demo:2


ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl edit deployment/helloworld-deployment


ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl rollout status deployment/helloworld-deployment

ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl rollout history deployment/helloworld-deployment

ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl rollout undo deployment/helloworld-deployment

ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl rollout undo deployment/helloworld-deployment --to-revision=n


ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl create -f deployment/helloworld.yml
deployment "helloworld-deployment" created


ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl create -f deployment/helloworld.yml
deployment "helloworld-deployment" created


ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl get deployments
NAME                    DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
helloworld-deployment   3         3         3            3           1m


ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl get rs
NAME                               DESIRED   CURRENT   READY     AGE
helloworld-deployment-57949f6b74   3         3         3         1m


ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl get pods
NAME                                     READY     STATUS    RESTARTS   AGE
helloworld-controller-mm48g              1/1       Running   0          53m
helloworld-deployment-57949f6b74-28b27   1/1       Running   0          1m
helloworld-deployment-57949f6b74-nkggh   1/1       Running   0          1m
helloworld-deployment-57949f6b74-t6nwr   1/1       Running   0          1m

ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl scale --replicas=0 rc/helloworld-controller
replicationcontroller "helloworld-controller" scaled

ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl get pods
NAME                                     READY     STATUS    RESTARTS   AGE
helloworld-deployment-57949f6b74-28b27   1/1       Running   0          5m
helloworld-deployment-57949f6b74-nkggh   1/1       Running   0          5m
helloworld-deployment-57949f6b74-t6nwr   1/1       Running   0          5m

ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl get pods --show-labels
NAME                                     READY     STATUS    RESTARTS   AGE       LABELS
helloworld-deployment-57949f6b74-28b27   1/1       Running   0          6m        app=helloworld,pod-template-hash=1350592630
helloworld-deployment-57949f6b74-nkggh   1/1       Running   0          6m        app=helloworld,pod-template-hash=1350592630
helloworld-deployment-57949f6b74-t6nwr   1/1       Running   0          6m        app=helloworld,pod-template-hash=1350592630


ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl get deployments
NAME                    DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
helloworld-deployment   3         3         3            3           8m


ubuntu@ubuntu-xenial:~/kubernetes-course$  kubectl rollout status deployment/helloworld-deployment
deployment "helloworld-deployment" successfully rolled out


ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl expose deployment helloworld-deployment --type=NodePort
service "helloworld-deployment" exposed


ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl get services
NAME                    TYPE           CLUSTER-IP       EXTERNAL-IP        PORT(S)          AGE
helloworld-deployment   NodePort       100.64.121.197   <none>             3000:31999/TCP   13s
helloworld-service      LoadBalancer   100.71.227.188   acad7b6fb0aac...   80:32658/TCP     1d
kubernetes              ClusterIP      100.64.0.1       <none>             443/TCP          1d


ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl describe service helloworld-deployment
Name:                     helloworld-deployment
Namespace:                default
Labels:                   app=helloworld
Annotations:              <none>
Selector:                 app=helloworld
Type:                     NodePort
IP:                       100.64.121.197
Port:                     <unset>  3000/TCP
TargetPort:               3000/TCP
NodePort:                 <unset>  31999/TCP
Endpoints:                100.96.1.6:3000,100.96.2.6:3000,100.96.2.7:3000
Session Affinity:         None
External Traffic Policy:  Cluster
Events:                   <none>




ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl set image deployment/helloworld-deployment k8s-demo=wardviane/k8s-demo:2
deployment "helloworld-deployment" image updated


ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl rollout status deployment/helloworld-deployment
Unable to connect to the server: dial tcp: lookup api.kubernetes.pickyprivacy.tech on 10.0.2.3:53: read udp 10.0.2.15:46007->10.0.2.3:53: i/o timeout



ubuntu@ubuntu-xenial:~/kubernetes-course$ kubectl rollout status deployment/helloworld-deployment
Waiting for rollout to finish: 2 out of 3 new replicas have been updated...







